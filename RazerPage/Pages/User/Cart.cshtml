@page
@model RazerPage.Pages.User.CartModel
@{
    ViewData["Title"] = "Shopping Cart";
}

<div class="container my-4">
    <h1 class="mb-4">Your Shopping Cart</h1>

    <div id="cartContainer">
        <div class="text-center py-5" id="emptyCart">
            <i class="bi bi-cart-x" style="font-size: 4rem; color: #adb5bd;"></i>
            <h3 class="mt-3">Your cart is empty</h3>
            <p class="text-muted">Looks like you haven't added any orchids to your cart yet.</p>
            <a asp-page="/User/Index" class="btn btn-primary mt-2">Browse Orchids</a>
        </div>

        <div id="cartContent" style="display: none;">
            <div class="table-responsive">
                <table class="table table-hover">
                    <thead class="table-light">
                        <tr>
                            <th style="width: 15%">Image</th>
                            <th style="width: 30%">Product</th>
                            <th style="width: 15%">Price</th>
                            <th style="width: 20%">Quantity</th>
                            <th style="width: 15%">Subtotal</th>
                            <th style="width: 5%"></th>
                        </tr>
                    </thead>
                    <tbody id="cartItems">
                        <!-- Cart items will be loaded here -->
                    </tbody>
                </table>
            </div>

            <div class="row mt-4">
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Order Summary</h5>
                            <div class="d-flex justify-content-between mb-2">
                                <span>Subtotal:</span>
                                <span>$<span id="cartSubtotal">0.00</span></span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <span>Shipping:</span>
                                <span>$<span id="shippingCost">5.00</span></span>
                            </div>
                            <hr>
                            <div class="d-flex justify-content-between fw-bold">
                                <span>Total:</span>
                                <span>$<span id="orderTotal">0.00</span></span>
                            </div>
                            <button id="checkoutButton" class="btn btn-success w-100 mt-3">
                                Proceed to Checkout
                            </button>
                        </div>
                    </div>
                </div>
                <div class="col-md-6">
                    <div class="card">
                        <div class="card-body">
                            <h5 class="card-title">Cart Actions</h5>
                            <button id="clearCartBtn" class="btn btn-outline-danger mb-2 w-100">
                                <i class="bi bi-trash"></i> Clear Cart
                            </button>
                            <a asp-page="/User/Index" class="btn btn-outline-primary w-100">
                                <i class="bi bi-arrow-left"></i> Continue Shopping
                            </a>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Hidden fields for authentication -->
    <input type="hidden" id="userRole" value="2" />
    <input type="hidden" id="usingCookieAuth" value="false" />
</div>

<!-- Order Confirmation Modal -->
<div class="modal fade" id="confirmOrderModal" tabindex="-1" aria-labelledby="confirmOrderModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header bg-light">
                <h5 class="modal-title" id="confirmOrderModalLabel">Confirm Your Order</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="alert alert-info">
                    Please review your order details before confirming.
                </div>

                <h6 class="mb-3">Order Items:</h6>
                <div class="table-responsive">
                    <table class="table table-sm table-bordered">
                        <thead class="table-light">
                            <tr>
                                <th>Product</th>
                                <th>Price</th>
                                <th>Quantity</th>
                                <th>Subtotal</th>
                            </tr>
                        </thead>
                        <tbody id="modalCartItems">
                            <!-- Items will be populated dynamically -->
                        </tbody>
                        <tfoot class="table-light">
                            <tr>
                                <td colspan="3" class="text-end fw-bold">Subtotal:</td>
                                <td id="modalSubtotal">$0.00</td>
                            </tr>
                            <tr>
                                <td colspan="3" class="text-end fw-bold">Shipping:</td>
                                <td id="modalShipping">$5.00</td>
                            </tr>
                            <tr>
                                <td colspan="3" class="text-end fw-bold">Order Total:</td>
                                <td id="modalTotal" class="fw-bold">$0.00</td>
                            </tr>
                        </tfoot>
                    </table>
                </div>

                <div class="mt-4">
                    <h6 class="mb-3">Additional Information:</h6>
                    <div class="mb-3">
                        <label for="orderNote" class="form-label">Order Notes (optional):</label>
                        <textarea class="form-control" id="orderNote" rows="2" placeholder="Any special instructions for your order?"></textarea>
                    </div>
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-success" id="placeOrderBtn">
                    <i class="bi bi-check2-circle me-2"></i>Place Order
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Processing Order Modal -->
<div class="modal fade" id="processingModal" data-bs-backdrop="static" tabindex="-1" aria-labelledby="processingModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-sm modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-body text-center py-4">
                <div class="spinner-border text-primary mb-3" role="status">
                    <span class="visually-hidden">Loading...</span>
                </div>
                <h5 id="processingModalLabel">Processing Your Order</h5>
                <p class="text-muted small">Please wait, this may take a moment...</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        // Debug log function - simplified to only log to console
        function logToDebug(message, data = null) {
            const timestamp = new Date().toISOString().split('T')[1].split('.')[0];
            let logEntry = `[${timestamp}] ${message}`;

            // Log to console only
            console.log(logEntry);
            if (data) console.log(data);
        }

        document.addEventListener('DOMContentLoaded', function() {
            logToDebug('Cart page loaded');
            loadCart();

            // Set up event listeners
            document.getElementById('clearCartBtn')?.addEventListener('click', clearCart);
            document.getElementById('checkoutButton')?.addEventListener('click', proceedToCheckout);
            document.getElementById('placeOrderBtn')?.addEventListener('click', submitOrder);
        });

        // Function to get cart from localStorage
        function getCart() {
            try {
                const cartJson = localStorage.getItem('orchidCart');
                logToDebug("Raw cart data from localStorage:", cartJson);

                if (cartJson) {
                    const cart = JSON.parse(cartJson);
                    logToDebug("Parsed cart:", cart);
                    return cart;
                }
            } catch (e) {
                logToDebug('Error getting cart from localStorage:', e);
            }
            return [];
        }

        // Function to save cart to localStorage
        function setCart(cart) {
            try {
                localStorage.setItem('orchidCart', JSON.stringify(cart));
                logToDebug("Cart saved to localStorage:", cart);

                // Update navbar badge if it exists
                const badge = document.getElementById('cartBadge');
                if (badge) {
                    const count = cart ? cart.reduce((total, item) => total + item.Quantity, 0) : 0;
                    badge.textContent = count;
                    badge.style.display = count > 0 ? 'inline-block' : 'none';
                }
            } catch (e) {
                logToDebug('Error saving cart to localStorage:', e);
            }
        }

        function loadCart() {
            // Get cart from localStorage instead of cookies
            const cart = getCart();
            logToDebug("Loading cart with items:", cart);

            const cartContent = document.getElementById('cartContent');
            const emptyCart = document.getElementById('emptyCart');
            const cartItems = document.getElementById('cartItems');

            if (!cart || cart.length === 0) {
                logToDebug('Cart is empty or not found');
                cartContent.style.display = 'none';
                emptyCart.style.display = 'block';
                return;
            }

            logToDebug(`Found ${cart.length} items in cart`);
            cartContent.style.display = 'block';
            emptyCart.style.display = 'none';

            // Clear previous items
            cartItems.innerHTML = '';

            // Calculate total
            let subtotal = 0;

            // Add each item to the table
            cart.forEach(item => {
                logToDebug(`Processing item: ${item.Name}, ID: ${item.Id}, Qty: ${item.Quantity}`);
                const itemSubtotal = parseFloat(item.Price) * item.Quantity;
                subtotal += itemSubtotal;

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <img src="${item.ImageUrl || '/images/no-image.png'}" alt="${item.Name}"
                            class="img-thumbnail" style="width: 80px; height: 80px; object-fit: cover;">
                    </td>
                    <td>
                        <h6 class="mb-0">${item.Name}</h6>
                        <small class="text-muted">ID: ${item.Id}</small>
                    </td>
                    <td>$${parseFloat(item.Price).toFixed(2)}</td>
                    <td>
                        <div class="input-group" style="max-width: 150px">
                            <button class="btn btn-outline-secondary"
                                onclick="updateQuantity('${item.Id}', -1)">-</button>
                            <input type="text" class="form-control text-center"
                                value="${item.Quantity}" readonly>
                            <button class="btn btn-outline-secondary"
                                onclick="updateQuantity('${item.Id}', 1)">+</button>
                        </div>
                    </td>
                    <td>$${itemSubtotal.toFixed(2)}</td>
                    <td>
                        <button class="btn btn-sm btn-outline-danger"
                            onclick="removeItem('${item.Id}')">
                            <i class="bi bi-trash"></i>
                        </button>
                    </td>
                `;

                cartItems.appendChild(row);
            });

            // Update summary
            document.getElementById('cartSubtotal').textContent = subtotal.toFixed(2);

            const shippingCost = subtotal > 0 ? 5.00 : 0.00;
            document.getElementById('shippingCost').textContent = shippingCost.toFixed(2);

            const total = subtotal + shippingCost;
            document.getElementById('orderTotal').textContent = total.toFixed(2);
        }

        function updateQuantity(id, change) {
            let cart = getCart();
            const index = cart.findIndex(item => item.Id === id);

            if (index !== -1) {
                cart[index].Quantity += change;

                // Remove item if quantity reaches 0
                if (cart[index].Quantity <= 0) {
                    cart.splice(index, 1);
                }

                setCart(cart);
                loadCart();
            }
        }

        function removeItem(id) {
            if (confirm('Are you sure you want to remove this item from your cart?')) {
                let cart = getCart();
                const index = cart.findIndex(item => item.Id === id);

                if (index !== -1) {
                    cart.splice(index, 1);
                    setCart(cart);
                    loadCart();
                }
            }
        }

        function clearCart() {
            if (confirm('Are you sure you want to clear your entire cart?')) {
                setCart([]);
                loadCart();
            }
        }

        function proceedToCheckout() {
            const cart = getCart();
            if (!cart || cart.length === 0) {
                alert('Your cart is empty.');
                return;
            }

            // Since this page is already protected by [Authorize(Roles = "2")],
            // if we can view it, we're already authenticated
            const token = localStorage.getItem('jwt_token');
            logToDebug(token ? 'JWT token found in localStorage' : 'No JWT token in localStorage, but page is auth-protected');

            // If we don't have a token but can view this page, we must be using cookie auth
            if (!token) {
                document.getElementById('usingCookieAuth').value = 'true';
                logToDebug('Using cookie-based authentication instead of JWT');
            }

            // Populate the confirmation modal
            populateOrderModal();

            // Show the confirmation modal
            const modal = new bootstrap.Modal(document.getElementById('confirmOrderModal'));
            modal.show();
        }

        function populateOrderModal() {
            const cart = getCart();
            const modalCartItems = document.getElementById('modalCartItems');
            modalCartItems.innerHTML = '';

            let subtotal = 0;

            cart.forEach(item => {
                const itemSubtotal = parseFloat(item.Price) * item.Quantity;
                subtotal += itemSubtotal;

                const row = document.createElement('tr');
                row.innerHTML = `
                    <td>
                        <div class="d-flex align-items-center">
                            <img src="${item.ImageUrl || '/images/no-image.png'}" alt="${item.Name}"
                                class="me-2" style="width: 40px; height: 40px; object-fit: cover;">
                            <div>
                                <div class="fw-semibold">${item.Name}</div>
                                <small class="text-muted">ID: ${item.Id}</small>
                            </div>
                        </div>
                    </td>
                    <td>$${parseFloat(item.Price).toFixed(2)}</td>
                    <td>${item.Quantity}</td>
                    <td>$${itemSubtotal.toFixed(2)}</td>
                `;
                modalCartItems.appendChild(row);
            });

            // Update totals
            document.getElementById('modalSubtotal').textContent = '$' + subtotal.toFixed(2);

            const shippingCost = subtotal > 0 ? 5.00 : 0.00;
            document.getElementById('modalShipping').textContent = '$' + shippingCost.toFixed(2);

            const total = subtotal + shippingCost;
            document.getElementById('modalTotal').textContent = '$' + total.toFixed(2);
        }

        function getUserAccountId() {
            // Try to get account ID from JWT token
            try {
                const token = localStorage.getItem('jwt_token');
                if (token) {
                    const base64Url = token.split('.')[1];
                    const base64 = base64Url.replace(/-/g, '+').replace(/_/g, '/');
                    const payload = JSON.parse(window.atob(base64));
                    return payload.accountId || payload.nameid || 1;
                }
            } catch (e) {
                logToDebug('Error extracting account ID from token:', e);
            }
            return 1; // Fallback ID
        }

        function getUserRole() {
            // Always return 2 for customer role
            return 2;
        }

        function submitOrder() {
            try {
                logToDebug('Starting order submission process');

                // Get JWT token
                const token = localStorage.getItem('jwt_token');
                const usingCookieAuth = document.getElementById('usingCookieAuth').value === 'true';

                if (!token && !usingCookieAuth) {
                    logToDebug('No authentication method available, will try cookie auth');
                    document.getElementById('usingCookieAuth').value = 'true';
                }

                // Hide confirmation modal
                const confirmModal = bootstrap.Modal.getInstance(document.getElementById('confirmOrderModal'));
                confirmModal.hide();

                // Show processing modal
                const processingModal = new bootstrap.Modal(document.getElementById('processingModal'));
                processingModal.show();

                const cart = getCart();
                const accountId = getUserAccountId();

                // Calculate totals
                let subtotal = 0;
                cart.forEach(item => {
                    subtotal += parseFloat(item.Price) * item.Quantity;
                });
                const total = subtotal + 5.00; // Adding $5 shipping
                logToDebug(`Calculated total: $${total.toFixed(2)}`);

                // Create order details from cart items
                const orderDetails = cart.map(item => ({
                    orchidId: parseInt(item.Id),
                    price: parseFloat(item.Price),
                    quantity: item.Quantity
                }));

                // Create the order object in the format expected by the API
                const orderData = {
                    accountId: accountId,
                    orderDate: new Date().toISOString().split('T')[0], // Format as YYYY-MM-DD
                    orderStatus: "Pending",
                    totalAmount: total,
                    orderDetails: orderDetails,
                    roleId: 2 // This should be fixed to 2 for customer role
                };

                logToDebug('Order data prepared:', orderData);

                // Configure headers based on authentication type
                const headers = {
                    'Content-Type': 'application/json'
                };

                // If JWT token is available, use it
                if (token) {
                    headers['Authorization'] = `Bearer ${token}`;
                    logToDebug('Using JWT token for authorization');
                } else {
                    logToDebug('Using cookie authentication');
                    // With cookie auth, the cookie is automatically sent by the browser
                }

                // Send request with appropriate authentication
                fetch('http://localhost:5164/api/Order', {
                    method: 'POST',
                    headers: headers,
                    body: JSON.stringify(orderData),
                    credentials: 'include' // Important! This includes cookies in the request
                })
                .then(response => {
                    logToDebug(`API Response received: status ${response.status}`);

                    if (response.status === 401 || response.status === 403) {
                        throw new Error('Authentication failed. Your session may have expired.');
                    }

                    if (!response.ok) {
                        return response.text().then(text => {
                            logToDebug(`API Error Response: ${text}`);
                            localStorage.setItem('lastResponseError', text);
                            throw new Error('Network response was not ok: ' + response.statusText);
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    logToDebug('Order created successfully:', data);
                    localStorage.setItem('lastOrderResponse', JSON.stringify(data));

                    // Clear the cart
                    setCart([]);
                    logToDebug('Cart cleared');

                    // Hide processing modal
                    processingModal.hide();
                    logToDebug('Processing modal hidden');

                    // Show success message
                    alert('Your order has been placed successfully!');

                    // Redirect to User Index page instead of order confirmation
                    logToDebug('Redirecting to User/Index page');
                    window.location.href = '/User/Index';
                })
                .catch(error => {
                    logToDebug(`Error creating order: ${error.message}`);
                    processingModal.hide();

                    // Provide more specific guidance for network errors
                    if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
                        alert('Network error: Unable to connect to the order processing service.\n\n' +
                              'Please check:\n' +
                              '- Your internet connection\n' +
                              '- The API server is running at http://localhost:5164\n' +
                              '- CORS is properly configured on the API server\n\n' +
                              'Try refreshing the page or try again later.');
                    } else {
                        alert('There was a problem processing your order. Please try again.\n\nError details: ' + error.message);
                    }
                });
            } catch (err) {
                logToDebug(`Critical error in submitOrder: ${err.message}`);
                try {
                    const processingModal = bootstrap.Modal.getInstance(document.getElementById('processingModal'));
                    if (processingModal) {
                        processingModal.hide();
                    }
                } catch (modalErr) {
                    logToDebug(`Error hiding modal: ${modalErr.message}`);
                }

                alert(`A critical error occurred: ${err.message}`);
            }
        }
    </script>
}