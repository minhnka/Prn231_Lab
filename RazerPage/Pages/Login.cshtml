@page
@model RazerPage.Pages.LoginModel
@{
    ViewData["Title"] = "Log in";
}

<div class="row justify-content-center">
    <div class="col-md-6">
        <h1 class="mb-4">@ViewData["Title"]</h1>
        <div class="card">
            <div class="card-body">
                <form method="post">
                    <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

                    <div class="mb-3">
                        <label asp-for="LoginInput.Email" class="form-label"></label>
                        <input asp-for="LoginInput.Email" class="form-control" autocomplete="username" />
                        <span asp-validation-for="LoginInput.Email" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="LoginInput.Password" class="form-label"></label>
                        <input asp-for="LoginInput.Password" class="form-control" type="password" autocomplete="current-password" />
                        <span asp-validation-for="LoginInput.Password" class="text-danger"></span>
                    </div>

                    <div class="mb-3 form-check">
                        <input asp-for="LoginInput.RememberMe" class="form-check-input" />
                        <label asp-for="LoginInput.RememberMe" class="form-check-label"></label>
                    </div>

                    <button type="submit" class="btn btn-primary">Log in</button>
                </form>
            </div>
        </div>

        <div class="mt-3">
            <p>
                <a href="#" id="showRegisterModal">Register as a new user</a>
            </p>
        </div>
    </div>

    <div class="modal fade" id="registerModal" tabindex="-1" aria-labelledby="registerModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="registerModalLabel">Register New User</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div id="registerMessage" class="alert d-none" role="alert"></div>
                    <form id="registerForm">
                        <div class="mb-3">
                            <label for="registerAccountName" class="form-label">Account Name</label>
                            <input type="text" class="form-control" id="registerAccountName" required>
                        </div>
                        <div class="mb-3">
                            <label for="registerEmail" class="form-label">Email</label>
                            <input type="email" class="form-control" id="registerEmail" required>
                        </div>
                        <div class="mb-3">
                            <label for="registerPassword" class="form-label">Password</label>
                            <input type="password" class="form-control" id="registerPassword" required>
                        </div>
                        <div class="mb-3">
                            <label for="confirmPassword" class="form-label">Confirm Password</label>
                            <input type="password" class="form-control" id="confirmPassword" required>
                        </div>
                    </form>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    <button type="button" class="btn btn-primary" id="registerSubmit">Register</button>
                </div>
            </div>
        </div>
    </div>
</div>




@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    @if (TempData["JwtToken"] != null)
    {
        <script>
            (function() {
                try {
                    // Safely store JWT token with proper encoding handling
                    const token = '@Html.Raw(Json.Serialize(TempData["JwtToken"]))';
                    localStorage.setItem('jwt_token', token.replace(/^"|"$/g, ''));
                    console.log('JWT token saved to localStorage');
                } catch (err) {
                    console.error('Error storing JWT token:', err);
                }
            })();
        </script>

    }


    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Show modal when register link is clicked
            document.getElementById('showRegisterModal').addEventListener('click', function(e) {
                e.preventDefault();
                const registerModal = new bootstrap.Modal(document.getElementById('registerModal'));
                registerModal.show();
            });

            // Handle registration form submission
            document.getElementById('registerSubmit').addEventListener('click', function() {
                const accountName = document.getElementById('registerAccountName').value;
                const email = document.getElementById('registerEmail').value;
                const password = document.getElementById('registerPassword').value;
                const confirmPassword = document.getElementById('confirmPassword').value;
                const messageElement = document.getElementById('registerMessage');

                // Clear previous messages
                messageElement.classList.remove('alert-danger', 'alert-success', 'd-none');
                messageElement.classList.add('d-none');

                // Form validation
                if (!accountName || !email || !password || !confirmPassword) {
                    messageElement.textContent = 'Please fill in all fields.';
                    messageElement.classList.add('alert-danger');
                    messageElement.classList.remove('d-none');
                    return;
                }

                if (password !== confirmPassword) {
                    messageElement.textContent = 'Passwords do not match.';
                    messageElement.classList.add('alert-danger');
                    messageElement.classList.remove('d-none');
                    return;
                }

                // Submit registration via API
                fetch('http://localhost:5164/User/CreateAccount', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({
                        accountName: accountName,
                        email: email,
                        password: password
                    })
                })
                .then(response => {
                    if (!response.ok) {
                        return response.json().then(data => {
                            throw new Error(data.message || 'Registration failed. Please try again.');
                        });
                    }
                    return response.json();
                })
                .then(data => {
                    messageElement.textContent = 'Registration successful! You can now log in.';
                    messageElement.classList.add('alert-success');
                    messageElement.classList.remove('d-none');

                    // Reset form
                    document.getElementById('registerForm').reset();

                    // Close modal after 2 seconds
                    setTimeout(() => {
                        bootstrap.Modal.getInstance(document.getElementById('registerModal')).hide();
                    }, 2000);
                })
                .catch(error => {
                    messageElement.textContent = error.message || 'An error occurred during registration.';
                    messageElement.classList.add('alert-danger');
                    messageElement.classList.remove('d-none');
                });
            });
        });
    </script>
}